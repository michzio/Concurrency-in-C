# Makefile for UNIX 

# the compiler: gcc for C program, define as g++ for C++ 
CC = gcc 

# the static library archiver 
AR = ar rcs 

# compiler flags: 
# -g enable debugging 
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers
# -ansi donâ€™t use GNU extensions, stick to ANSI 
# -std=c99 use newer version 
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99

# libraries 
# custom
COMMON_FUNCTIONS_LIB_DIR=../common/outputs/debug/lib
COMMON_FUNCTIONS_STATIC_LIB_PATH=$(COMMON_FUNCTIONS_LIB_DIR)/libcommon_functions.a
COMPARERS_LIB_DIR=../comparers/outputs/debug/lib
COMPARERS_STATIC_LIB_PATH=$(COMPARERS_LIB_DIR)/libcomparers.a
COLLECTIONS_LIB_DIR=../collections/outputs/debug/lib
COLLECTIONS_STATIC_LIB_PATH=$(COLLECTIONS_LIB_DIR)/libcollections.a
# executable's libraries
UNIT_TESTS_STATIC_LIB_PATH=../unit_tests/outputs/debug/lib/libunit_tests.a

# include directories
INCLUDE_DIRS= ./include ../common/include ../common/libraries ../comparers/include ../collections/include ../unit_tests/include
CFLAGS+= $(foreach d, $(INCLUDE_DIRS), -I$d)

# the build target executable: 
TARGET = concurrency
LIBRARY = libconcurrency.a
SHARED_LIBRARY = libconcurrency.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= libconcurrency.dylib
else 
	DYNAMIC_LIBRARY=
endif

# source files 
SOURCE_FILES = time.o fifo_queue.o task_queue.o thread_pool.o generic_runner.o generic_thread.o generic_threads_manager.o

# test source files 
TEST_SOURCE_FILES = test_fifo_queue.o test_task_queue.o test_thread_pool.o test_threads_manager.o

# outputs directories
OUTPUTS_DIR = outputs/debug
OUTPUTS_LIB_DIR = $(OUTPUTS_DIR)/lib
OUTPUTS_BIN_DIR = $(OUTPUTS_DIR)/bin
OUTPUTS_TEST_DIR = $(OUTPUTS_DIR)/test

all: directories libraries $(TARGET)

# make outputs directories
directories: 
	@mkdir -p $(OUTPUTS_DIR)
	@mkdir -p $(OUTPUTS_LIB_DIR)
	@mkdir -p $(OUTPUTS_BIN_DIR)
	@mkdir -p $(OUTPUTS_TEST_DIR)

libraries: $(LIBRARY) $(SHARED_LIBRARY) $(DYNAMIC_LIBRARY)

$(TARGET): $(LIBRARY) $(TEST_SOURCE_FILES)
	$(CC) $(CFLAGS) -o $(OUTPUTS_BIN_DIR)/$(TARGET) src/main.c $(OUTPUTS_TEST_DIR)/*.o $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(COMMON_FUNCTIONS_STATIC_LIB_PATH) $(COMPARERS_STATIC_LIB_PATH) $(COLLECTIONS_STATIC_LIB_PATH) $(UNIT_TESTS_STATIC_LIB_PATH)

$(SHARED_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) -L$(COMMON_FUNCTIONS_LIB_DIR) -L$(COMPARERS_LIB_DIR) -L$(COLLECTIONS_LIB_DIR) -shared -o $(OUTPUTS_LIB_DIR)/$(SHARED_LIBRARY) $(OUTPUTS_DIR)/*.o -lcommon_functions -lcomparers -lcollections

$(DYNAMIC_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) -L$(COMMON_FUNCTIONS_LIB_DIR) -L$(COMPARERS_LIB_DIR) -L$(COLLECTIONS_LIB_DIR) -dynamiclib -o $(OUTPUTS_LIB_DIR)/$(DYNAMIC_LIBRARY) $(OUTPUTS_DIR)/*.o -lcommon_functions -lcomparers -lcollections

$(LIBRARY): $(SOURCE_FILES)
	$(AR) $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OUTPUTS_DIR)/*.o

time.o: src/common/time.c include/common/time.h
	$(CC) $(CFLAGS) -c src/common/time.c -o $(OUTPUTS_DIR)/time.o

fifo_queue.o: src/common/fifo_queue.c include/common/fifo_queue.h
	$(CC) $(CFLAGS) -c src/common/fifo_queue.c -o $(OUTPUTS_DIR)/fifo_queue.o

task_queue.o: src/threads/thread_pool/task_queue.c include/threads/thread_pool/task_queue.h
	$(CC) $(CFLAGS) -c src/threads/thread_pool/task_queue.c -o $(OUTPUTS_DIR)/task_queue.o

thread_pool.o: src/threads/thread_pool/thread_pool.c include/threads/thread_pool/thread_pool.h
	$(CC) $(CFLAGS) -c src/threads/thread_pool/thread_pool.c -o $(OUTPUTS_DIR)/thread_pool.o

generic_runner.o: src/threads/generic_runner.c include/threads/generic_runner.h
	$(CC) $(CFLAGS) -c src/threads/generic_runner.c -o $(OUTPUTS_DIR)/generic_runner.o

generic_thread.o: src/threads/generic_thread.c include/threads/generic_thread.h
	$(CC) $(CFLAGS) -c src/threads/generic_thread.c -o $(OUTPUTS_DIR)/generic_thread.o

generic_threads_manager.o: src/threads/generic_threads_manager.c include/threads/generic_threads_manager.h
	$(CC) $(CFLAGS) -c src/threads/generic_threads_manager.c -o $(OUTPUTS_DIR)/generic_threads_manager.o

test_fifo_queue.o: test/test_fifo_queue.c test/test_fifo_queue.h
	$(CC) $(CFLAGS) -c test/test_fifo_queue.c -o $(OUTPUTS_TEST_DIR)/test_fifo_queue.o

test_task_queue.o: test/test_task_queue.c test/test_task_queue.h 
	$(CC) $(CFLAGS) -c test/test_task_queue.c -o $(OUTPUTS_TEST_DIR)/test_task_queue.o

test_thread_pool.o: test/test_thread_pool.c test/test_thread_pool.h
	$(CC) $(CFLAGS) -c test/test_thread_pool.c -o $(OUTPUTS_TEST_DIR)/test_thread_pool.o

test_threads_manager.o: test/test_threads_manager.c test/test_threads_manager.h
	$(CC) $(CFLAGS) -c test/test_threads_manager.c -o $(OUTPUTS_TEST_DIR)/test_threads_manager.o

clean: 
	$(RM) -rf $(OUTPUTS_DIR)