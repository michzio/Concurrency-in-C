# Makefile for UNIX 

# the compiler: gcc for C program, define as g++ for C++ 
CC = gcc 

# the static library archiver 
AR = ar rcs 

# compiler flags: 
# -g enable debugging 
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers
# -ansi donâ€™t use GNU extensions, stick to ANSI 
# -std=c99 use newer version 
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99

# libraries 
# custom
COMMON_FUNCTIONS_INCL_DIR = ../common
COLLECTIONS_INCL_DIR = ../collections
COMPARERS_INCL_DIR = ../comparers
UNIT_TESTS_INCL_DIR = ../unit_tests
 
COMMON_FUNCTIONS_LIBRARY = $(COMMON_FUNCTIONS_INCL_DIR)/output/debug/lib/static/libcommon_functions.a
COLLECTIONS_LIBRARY = $(COLLECTIONS_INCL_DIR)/output/debug/lib/static/libcollections.a
COMPARERS_LIBRARY = $(COMPARERS_INCL_DIR)/output/debug/lib/static/libcomparers.a
UNIT_TESTS_LIBRARY = $(UNIT_TESTS_INCL_DIR)/output/debug/lib/static/libunit_tests.a

# the build target executable: 
TARGET = concurrency
LIBRARY = libconcurrency.a
SHARED_LIBRARY = lib concurrency.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= libconcurrency.dylib
else 
	DYNAMIC_LIBRARY=
endif

# source files 
SOURCE_FILES = time.o fifo_queue.o task_queue.o thread_pool.o generic_runner.o generic_thread.o generic_threads_manager.o

# test source files 
TEST_SOURCE_FILES = test_fifo_queue.o test_task_queue.o test_thread_pool.o test_threads_manager.o

# output directories 
OUTPUT_DIR = output/debug
OUTPUT_LIB_DIR = $(OUTPUT_DIR)/lib
OUTPUT_STATIC_LIB_DIR = $(OUTPUT_LIB_DIR)/static
OUTPUT_BIN_DIR = $(OUTPUT_DIR)/bin
OUTPUT_TEST_DIR = $(OUTPUT_DIR)/test

all: directories libraries $(TARGET)

# make output directories
directories: 
	@mkdir -p $(OUTPUT_DIR)
	@mkdir -p $(OUTPUT_LIB_DIR)
	@mkdir -p $(OUTPUT_STATIC_LIB_DIR)
	@mkdir -p $(OUTPUT_BIN_DIR)
	@mkdir -p $(OUTPUT_TEST_DIR)

libraries: $(LIBRARY)

$(TARGET): $(LIBRARY) $(TEST_SOURCE_FILES)
	$(CC) $(CFLAGS) -o $(OUTPUT_BIN_DIR)/$(TARGET) main.c $(OUTPUT_TEST_DIR)/*.o $(OUTPUT_STATIC_LIB_DIR)/$(LIBRARY) $(COMMON_FUNCTIONS_LIBRARY) $(COLLECTIONS_LIBRARY) $(COMPARERS_LIBRARY) $(UNIT_TESTS_LIBRARY)

$(LIBRARY): $(SOURCE_FILES)
	$(AR) $(OUTPUT_STATIC_LIB_DIR)/$(LIBRARY) $(OUTPUT_DIR)/*.o 

time.o: common/time.c common/time.h 
	$(CC) $(CFLAGS) -c common/time.c -o $(OUTPUT_DIR)/time.o

fifo_queue.o: common/fifo_queue.c common/fifo_queue.h 
	$(CC) $(CFLAGS) -c common/fifo_queue.c -o $(OUTPUT_DIR)/fifo_queue.o

task_queue.o: threads/thread_pool/task_queue.c threads/thread_pool/task_queue.h
	$(CC) $(CFLAGS) -c threads/thread_pool/task_queue.c -o $(OUTPUT_DIR)/task_queue.o

thread_pool.o: threads/thread_pool/thread_pool.c threads/thread_pool/thread_pool.h
	$(CC) $(CFLAGS) -c threads/thread_pool/thread_pool.c -o $(OUTPUT_DIR)/thread_pool.o

generic_runner.o: threads/generic_runner.c threads/generic_runner.h 
	$(CC) $(CFLAGS) -c threads/generic_runner.c -o $(OUTPUT_DIR)/generic_runner.o

generic_thread.o: threads/generic_thread.c threads/generic_thread.h 
	$(CC) $(CFLAGS) -c threads/generic_thread.c -o $(OUTPUT_DIR)/generic_thread.o

generic_threads_manager.o: threads/generic_threads_manager.c threads/generic_threads_manager.h 
	$(CC) $(CFLAGS) -c threads/generic_threads_manager.c -o $(OUTPUT_DIR)/generic_threads_manager.o

test_fifo_queue.o: test/test_fifo_queue.c test/test_fifo_queue.h 
	$(CC) $(CFLAGS) -c test/test_fifo_queue.c -o $(OUTPUT_TEST_DIR)/test_fifo_queue.o

test_task_queue.o: test/test_task_queue.c test/test_task_queue.h 
	$(CC) $(CFLAGS) -c test/test_task_queue.c -o $(OUTPUT_TEST_DIR)/test_task_queue.o

test_thread_pool.o: test/test_thread_pool.c test/test_thread_pool.h
	$(CC) $(CFLAGS) -c test/test_thread_pool.c -o $(OUTPUT_TEST_DIR)/test_thread_pool.o

test_threads_manager.o: test/test_threads_manager.c test/test_threads_manager.h
	$(CC) $(CFLAGS) -c test/test_threads_manager.c -o $(OUTPUT_TEST_DIR)/test_threads_manager.o

clean: 
	$(RM) -rf $(OUTPUT_DIR)